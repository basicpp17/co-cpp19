#pragma once
#include "meta19/nullptr_to.h"

#include <type_traits> // std::is_invocable_r_v

namespace optional19 {

using meta19::nullptr_to;

template<auto make> constexpr bool notEqualBy(const decltype(make())& v) { return v != make(); }

/// PackedOptional saves the extra bool by using one value as invalid
/// note: we cannot pass any value to templates, so we pass a constexpr functor that returns the invalid value
template<auto makeInvalid, auto isValid = notEqualBy<makeInvalid>> struct PackedOptional {
private:
    using T = decltype(makeInvalid());
    T m_data{makeInvalid()};

public:
    using Value = T;

    constexpr PackedOptional() = default;
    constexpr PackedOptional(T v) : m_data((T &&) v) {}

    constexpr explicit operator bool() const { return isValid(m_data); }

    /// @return predicate(value()) if optional is set else return false
    template<class F> requires(std::is_invocable_r_v<bool, F, T>) constexpr auto operator&&(F&& f) const -> bool {
        return static_cast<bool>(*this) && f(value());
    }

    /// @return value if optional is set or generated by callable
    template<class F> requires(std::is_invocable_r_v<T, F>) constexpr auto operator||(F&& f) const -> T {
        return *this ? value() : f();
    }
    constexpr auto operator||(const T& v) const -> T { return *this ? value() : v; }

    template<class F> constexpr auto map(F&& f) const -> decltype(f(*nullptr_to<T>)) {
        if (*this) return f(value());
        if constexpr (!std::is_void_v<decltype(f(*nullptr_to<T>))>) return {};
    }

    constexpr auto value() const -> const T& { return m_data; }
    constexpr auto amend() -> T& { return m_data; }
};

/// helper function to use default value of T as invalid
/// usage: OptInt = PackedOptional<defaultOf<int>>;
template<class T> constexpr auto defaultOf() -> T { return {}; }

/// helper function to use nullptr as default for Pointer to T
/// usage: OptPtr = PackedOptional<ptrTo<void>>;
template<class T> constexpr auto nullptrTo() -> T* { return {}; }

} // namespace optional19
